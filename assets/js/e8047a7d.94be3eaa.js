"use strict";(self.webpackChunkwiki_42_mwx=self.webpackChunkwiki_42_mwx||[]).push([[4321],{4559:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>t,contentTitle:()=>r,default:()=>x,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var i=a(4848),n=a(8453);const o={sidebar_position:5},r="\ud83d\udce6 radix_sort.c",d={id:"rank 02/PushSwap/radix_sort",title:"\ud83d\udce6 radix_sort.c",description:"Entendendo a l\xf3gica passo a passo",source:"@site/docs/rank 02/PushSwap/radix_sort.mdx",sourceDirName:"rank 02/PushSwap",slug:"/rank 02/PushSwap/radix_sort",permalink:"/wiki_ft/docs/rank 02/PushSwap/radix_sort",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rank 02/PushSwap/radix_sort.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udcc2 assign_index.c",permalink:"/wiki_ft/docs/rank 02/PushSwap/asssign_index"},next:{title:"Tutorial - Extras",permalink:"/wiki_ft/docs/category/tutorial---extras"}},t={},c=[{value:"\ud83c\udfaf Objetivo do arquivo",id:"-objetivo-do-arquivo",level:2},{value:"\ud83e\udde0 O que \xe9 Radix Sort?",id:"-o-que-\xe9-radix-sort",level:2},{value:"\ud83d\udd0d Exemplo pr\xe1tico:",id:"-exemplo-pr\xe1tico",level:2},{value:"\ud83e\udde9 Fase 1 \u2014 Bit 0 (menos significativo):",id:"-fase-1--bit-0-menos-significativo",level:2},{value:"\ud83d\udee0\ufe0f Explicando o C\xf3digo",id:"\ufe0f-explicando-o-c\xf3digo",level:2},{value:"\ud83d\udd39 get_max_bits",id:"-get_max_bits",level:3},{value:"\ud83d\udd39 radix_sort",id:"-radix_sort",level:3},{value:"\ud83c\udfaf Por que usar bits?",id:"-por-que-usar-bits",level:3},{value:"\ud83d\udd1a Conclus\xe3o",id:"-conclus\xe3o",level:3}];function l(e){const s={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"-radix_sortc",children:"\ud83d\udce6 radix_sort.c"})}),"\n",(0,i.jsx)(s.p,{children:"Entendendo a l\xf3gica passo a passo"}),"\n",(0,i.jsx)(s.h2,{id:"-objetivo-do-arquivo",children:"\ud83c\udfaf Objetivo do arquivo"}),"\n",(0,i.jsx)(s.p,{children:"Esse arquivo implementa o algoritmo Radix Sort para ordenar os elementos de uma pilha (stack a) usando opera\xe7\xf5es restritas do projeto push_swap."}),"\n",(0,i.jsx)(s.h2,{id:"-o-que-\xe9-radix-sort",children:"\ud83e\udde0 O que \xe9 Radix Sort?"}),"\n",(0,i.jsx)(s.p,{children:"Radix Sort \xe9 um algoritmo de ordena\xe7\xe3o que n\xe3o compara valores diretamente."}),"\n",(0,i.jsx)(s.p,{children:"Ele ordena os elementos com base na representa\xe7\xe3o bin\xe1ria (ou decimal) de cada n\xfamero, bit a bit (ou d\xedgito a d\xedgito), do menos significativo para o mais significativo."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"\xc9 como organizar n\xfameros por cada casa decimal, mas aqui usamos bits (0s e 1s)."}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"-exemplo-pr\xe1tico",children:"\ud83d\udd0d Exemplo pr\xe1tico:"}),"\n",(0,i.jsx)(s.p,{children:"Imagine que temos os \xedndices (j\xe1 atribu\xeddos anteriormente) na stack:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-mdxjs",children:"Stack A (valores):     [12, 5, 3, 8]\nStack A (\xedndices):     [3, 1, 0, 2]  \u2b05\ufe0f pois \xe9 a ordem crescente dos valores\n\nRepresenta\xe7\xe3o bin\xe1ria:\n3 = 011\n1 = 001\n0 = 000\n2 = 010\n"})}),"\n",(0,i.jsx)(s.p,{children:"Cada n\xfamero tem 3 bits. Ent\xe3o o Radix Sort vai realizar 3 passes:"}),"\n",(0,i.jsx)(s.h2,{id:"-fase-1--bit-0-menos-significativo",children:"\ud83e\udde9 Fase 1 \u2014 Bit 0 (menos significativo):"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-mdxjs",children:"Verifica o bit 0 (direita):\n\n011 \u2192 1\n001 \u2192 1\n000 \u2192 0\n010 \u2192 0\n"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-mdxjs",children:"Dividimos os elementos:\n\n    bit = 0: mandamos para stack B \u2192 pb\n\n    bit = 1: rotacionamos em A \u2192 ra\n"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-mdxjs",children:"Resultado:\n\nStack A: [3, 1]  \u2b05\ufe0f ainda n\xe3o ordenado, mas com bit 1\nStack B: [0, 2]  \u2b05\ufe0f bit 0\n"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-mdxjs",children:"Depois voltamos todos da B \u2192 A com pa.\n\ud83d\udd04 Fase 2 \u2014 Bit 1:\n"})}),"\n",(0,i.jsx)(s.p,{children:"Agora olhamos o segundo bit da direita."}),"\n",(0,i.jsx)(s.p,{children:"Repetimos o processo. Assim, cada vez mais os elementos se aproximam da ordem correta.\nNo fim das 3 fases (porque temos at\xe9 3 bits), a pilha estar\xe1 ordenada por \xedndices, ou seja, ordenada pelos valores originais."}),"\n",(0,i.jsx)(s.h2,{id:"\ufe0f-explicando-o-c\xf3digo",children:"\ud83d\udee0\ufe0f Explicando o C\xf3digo"}),"\n",(0,i.jsx)(s.h3,{id:"-get_max_bits",children:"\ud83d\udd39 get_max_bits"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-C",children:"static int get_max_bits(t_node *stack)\n"})}),"\n",(0,i.jsx)(s.p,{children:"Essa fun\xe7\xe3o calcula quantos bits s\xe3o necess\xe1rios para representar o maior \xedndice da pilha."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-mdxjs",children:"Exemplo:\nSe o maior \xedndice \xe9 6\n\u2192 6 em bin\xe1rio \xe9 110\n\u2192 precisa de 3 bits\n"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-C",children:"while ((max_index >> bits) != 0)\nbits++;\n"})}),"\n",(0,i.jsx)(s.p,{children:"Aqui usamos o operador de bit shift (>>) para ir deslocando os bits at\xe9 sobrar 0, contando quantos bits foram usados."}),"\n",(0,i.jsx)(s.h3,{id:"-radix_sort",children:"\ud83d\udd39 radix_sort"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-C",children:"void radix_sort(t_node **a, t_node **b)\n"})}),"\n",(0,i.jsx)(s.p,{children:"Essa fun\xe7\xe3o executa o Radix Sort real, com base nos bits:"}),"\n",(0,i.jsx)(s.p,{children:"\ud83d\udd04 Loop externo:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-C",children:"while (i < max_bits)\n"})}),"\n",(0,i.jsx)(s.p,{children:"\u2192 repete para cada bit (0, 1, 2, ...)"}),"\n",(0,i.jsx)(s.p,{children:"\ud83d\udd01 Loop interno:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-C",children:"while (j < size)\n"})}),"\n",(0,i.jsx)(s.p,{children:"\u2192 para cada elemento da pilha, analisamos o bit i atual com:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-C",children:"if (((*a)->index >> i) & 1)\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsxs)(s.em,{children:[(0,i.jsx)(s.code,{children:">> i"}),": desloca os bits para a direita i vezes."]})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsxs)(s.em,{children:[(0,i.jsx)(s.code,{children:"& 1"}),": verifica se o bit atual \xe9 1."]})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Se for 1: fazemos ra (rotate a) \u2192 mantemos em A."}),"\n",(0,i.jsx)(s.li,{children:'Se for 0: fazemos pb (push para B) \u2192 mandamos para a "espera".'}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"\ud83d\udd1a No fim de cada fase:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-C",children:"while (*b)\npa(a, b);\n"})}),"\n",(0,i.jsx)(s.p,{children:"Recolocamos tudo de volta da stack B para A, prontos para o pr\xf3ximo bit."}),"\n",(0,i.jsx)(s.h3,{id:"-por-que-usar-bits",children:"\ud83c\udfaf Por que usar bits?"}),"\n",(0,i.jsx)(s.p,{children:"\u2705 Vantagens:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"\xc9 determin\xedstico e est\xe1vel."}),"\n",(0,i.jsx)(s.li,{children:"Funciona muito bem quando os n\xfameros s\xe3o pequenos e sequenciais (como os \xedndices que j\xe1 criamos)."}),"\n",(0,i.jsx)(s.li,{children:"Evita compara\xe7\xf5es e facilita muito dentro das restri\xe7\xf5es do push_swap (que s\xf3 permite algumas opera\xe7\xf5es)."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"-conclus\xe3o",children:"\ud83d\udd1a Conclus\xe3o"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Conceito"}),(0,i.jsx)(s.th,{children:"Fun\xe7\xe3o"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Bit manipulation"})}),(0,i.jsx)(s.td,{children:"Usada para isolar cada bit individual e decidir o que fazer com o n\xfamero."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Stack A e B"})}),(0,i.jsx)(s.td,{children:"A: principal. B: tempor\xe1ria para segregar elementos."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"\xcdndice"})}),(0,i.jsx)(s.td,{children:"J\xe1 est\xe1 atribu\xeddo com base na ordem dos valores, e o Radix ordena com base nisso."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.strong,{children:"Complexidade"})}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"O(n * log n)"})," nos melhores casos com \xedndices \u2014 muito bom para nosso cen\xe1rio."]})]})]})]})]})}function x(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,s,a)=>{a.d(s,{R:()=>r,x:()=>d});var i=a(6540);const n={},o=i.createContext(n);function r(e){const s=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),i.createElement(o.Provider,{value:s},e.children)}}}]);
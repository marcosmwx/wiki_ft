"use strict";(self.webpackChunkwiki_42_mwx=self.webpackChunkwiki_42_mwx||[]).push([[227],{524:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>l});var s=n(4848),a=n(8453);const o={sidebar_position:3},i="Verificacao de argumentos \ud83e\udde0",t={id:"rank 02/PushSwap/verify_arguments",title:"Verificacao de argumentos \ud83e\udde0",description:"Valida\xe7\xe3o e Processamento de Argumentos - verify_arguments.c",source:"@site/docs/rank 02/PushSwap/verify_arguments.mdx",sourceDirName:"rank 02/PushSwap",slug:"/rank 02/PushSwap/verify_arguments",permalink:"/wiki_ft/docs/rank 02/PushSwap/verify_arguments",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rank 02/PushSwap/verify_arguments.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"push_swap \ud83e\udde0\ud83d\udce6",permalink:"/wiki_ft/docs/rank 02/PushSwap/push_swap"},next:{title:"\ud83d\udcc2 assign_index.c",permalink:"/wiki_ft/docs/rank 02/PushSwap/asssign_index"}},c={},l=[{value:"Valida\xe7\xe3o e Processamento de Argumentos - verify_arguments.c",id:"valida\xe7\xe3o-e-processamento-de-argumentos---verify_argumentsc",level:2},{value:"\ud83d\udccc Vis\xe3o geral",id:"-vis\xe3o-geral",level:2},{value:"\ud83d\udd0d C\xf3digo completo com explica\xe7\xf5es por partes",id:"-c\xf3digo-completo-com-explica\xe7\xf5es-por-partes",level:2},{value:"\ud83e\uddf9 Fun\xe7\xe3o extra: free_resources",id:"-fun\xe7\xe3o-extra-free_resources",level:2}];function d(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"verificacao-de-argumentos-",children:"Verificacao de argumentos \ud83e\udde0"})}),"\n",(0,s.jsx)(r.h2,{id:"valida\xe7\xe3o-e-processamento-de-argumentos---verify_argumentsc",children:"Valida\xe7\xe3o e Processamento de Argumentos - verify_arguments.c"}),"\n",(0,s.jsx)(r.p,{children:"Este arquivo \xe9 respons\xe1vel por garantir que os argumentos fornecidos para o programa sejam v\xe1lidos, convert\xea-los em n\xfameros inteiros, e armazen\xe1-los de forma segura para que o restante do programa possa utiliz\xe1-los (especialmente o algoritmo de ordena\xe7\xe3o, como o Radix Sort)."}),"\n",(0,s.jsx)(r.h2,{id:"-vis\xe3o-geral",children:"\ud83d\udccc Vis\xe3o geral"}),"\n",(0,s.jsx)(r.p,{children:"Antes de qualquer ordena\xe7\xe3o, precisamos:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Validar se os argumentos s\xe3o n\xfameros v\xe1lidos;"}),"\n",(0,s.jsx)(r.li,{children:"Garantir que n\xe3o h\xe1 duplicatas;"}),"\n",(0,s.jsx)(r.li,{children:"Garantir que est\xe3o dentro dos limites de um int;"}),"\n",(0,s.jsx)(r.li,{children:'Lidar com argumentos passados como "1 2 3" ou como "1" "2" "3".'}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"-c\xf3digo-completo-com-explica\xe7\xf5es-por-partes",children:"\ud83d\udd0d C\xf3digo completo com explica\xe7\xf5es por partes"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-C",metastring:"check_digits",children:"int check_digits(char *str)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Objetivo: Verifica se uma string cont\xe9m apenas d\xedgitos num\xe9ricos (com um sinal opcional no in\xedcio).\nDetalhes:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Permite + ou - no in\xedcio da string."}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Retorna 1 (erro) se:"}),"\n",(0,s.jsx)(r.p,{children:"Algum caractere n\xe3o for n\xfamero."}),"\n",(0,s.jsx)(r.p,{children:"Se o \xfaltimo caractere for um sinal (+ ou -), ou seja, sinal sem n\xfamero."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-C",metastring:"verify_equals",children:"int verify_equals(long long *numbers, int count)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Objetivo: Garante que os n\xfameros inseridos n\xe3o sejam repetidos.\nDetalhes:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Compara todos os pares da lista de n\xfameros."}),"\n",(0,s.jsx)(r.li,{children:"Se dois n\xfameros forem iguais, retorna erro (1)."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-C",metastring:"process_numbers",children:"int process_numbers(char **numbers, long long *numbers_list, int *count)\n"})}),"\n",(0,s.jsx)(r.p,{children:'Objetivo: Processa uma lista de strings num\xe9ricas (como ["1", "2", "3"]), valida e armazena em um array numbers_list.\nDetalhes:'}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Verifica se cada string \xe9 v\xe1lida com check_digits."}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Converte com ft_atol e verifica se est\xe1 dentro do intervalo de um int."}),"\n",(0,s.jsx)(r.p,{children:"Se tudo estiver ok, adiciona ao numbers_list e atualiza count."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-C",metastring:"process_argument",children:"int process_argument(char *arg, long long *numbers_list, int *count)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Objetivo: Lida com cada argumento individual (do argv).\nCasos tratados:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:'Se o argumento contiver espa\xe7o ("1 2 3"), ele \xe9 dividido com ft_split.'}),"\n",(0,s.jsx)(r.li,{children:"Cada parte \xe9 processada com process_numbers."}),"\n",(0,s.jsx)(r.li,{children:'Se for um argumento simples ("42"), ele \xe9 validado e convertido diretamente.'}),"\n",(0,s.jsx)(r.li,{children:"Se qualquer parte falhar, retorna erro."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-C",metastring:"verify_arguments",children:"long long *verify_arguments(int ac, char **av, int *count)\n"})}),"\n",(0,s.jsx)(r.p,{children:"Objetivo: Fun\xe7\xe3o principal chamada no main() para validar todos os argumentos recebidos.\nDetalhes:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Cria um array numbers_list suficientemente grande."}),"\n",(0,s.jsx)(r.li,{children:"Percorre os argumentos (ignorando o primeiro, que \xe9 o nome do programa)."}),"\n",(0,s.jsx)(r.li,{children:"Usa process_argument para validar cada um."}),"\n",(0,s.jsx)(r.li,{children:"Por fim, chama verify_equals para evitar duplicatas."}),"\n",(0,s.jsx)(r.li,{children:"Se tudo estiver correto, retorna a lista de n\xfameros prontos para uso."}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"-fun\xe7\xe3o-extra-free_resources",children:"\ud83e\uddf9 Fun\xe7\xe3o extra: free_resources"}),"\n",(0,s.jsx)(r.p,{children:"Embora n\xe3o esteja neste arquivo, essa fun\xe7\xe3o aparece v\xe1rias vezes. Ela serve para liberar mem\xf3ria em caso de erro \u2014 essencial para evitar vazamentos de mem\xf3ria durante as valida\xe7\xf5es.\n\ud83d\udca1 Conclus\xe3o"}),"\n",(0,s.jsx)(r.p,{children:"O verify_arguments.c \xe9 essencial para garantir que os dados de entrada estejam corretos antes de rodar qualquer algoritmo de ordena\xe7\xe3o. Isso \xe9 fundamental no projeto push_swap, onde:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Entradas erradas devem gerar erro."}),"\n",(0,s.jsx)(r.li,{children:'Valores inv\xe1lidos (como "42a" ou "999999999999") s\xe3o rejeitados.'}),"\n",(0,s.jsx)(r.li,{children:"O programa lida corretamente tanto com argumentos \xfanicos quanto com m\xfaltiplos valores em uma \xfanica string."}),"\n"]})]})}function u(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>t});var s=n(6540);const a={},o=s.createContext(a);function i(e){const r=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:r},e.children)}}}]);
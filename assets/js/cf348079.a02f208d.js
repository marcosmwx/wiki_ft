"use strict";(self.webpackChunkwiki_42_mwx=self.webpackChunkwiki_42_mwx||[]).push([[7157],{7187:(a,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>r,default:()=>l,frontMatter:()=>o,metadata:()=>t,toc:()=>c});var i=n(4848),s=n(8453);const o={},r="Anota\xe7\xf5es",t={id:"rank 01/ft_printf/anotacoes",title:"Anota\xe7\xf5es",description:"Aprendendo mais um pouco antes de iniciar",source:"@site/docs/rank 01/ft_printf/anotacoes.mdx",sourceDirName:"rank 01/ft_printf",slug:"/rank 01/ft_printf/anotacoes",permalink:"/wiki_ft/docs/rank 01/ft_printf/anotacoes",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rank 01/ft_printf/anotacoes.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Ft_printf",permalink:"/wiki_ft/docs/category/ft_printf"},next:{title:"Subject",permalink:"/wiki_ft/docs/rank 01/ft_printf/subject"}},d={},c=[{value:"Aprendendo mais um pouco antes de iniciar",id:"aprendendo-mais-um-pouco-antes-de-iniciar",level:2},{value:"O que \xe9 va_list?",id:"o-que-\xe9-va_list",level:2},{value:"Vamos aos detalhes:",id:"vamos-aos-detalhes",level:3},{value:"va_start",id:"va_start",level:3},{value:"va_arg",id:"va_arg",level:3},{value:"va_end",id:"va_end",level:3}];function u(a){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...a.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"anota\xe7\xf5es",children:"Anota\xe7\xf5es"})}),"\n",(0,i.jsx)(e.h2,{id:"aprendendo-mais-um-pouco-antes-de-iniciar",children:"Aprendendo mais um pouco antes de iniciar"}),"\n",(0,i.jsx)(e.p,{children:"Para entender um pouco sobre a biblioteca que nos foi mostrada para usar na ft_printf."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-C",children:"#include <strarg.h>\n"})}),"\n",(0,i.jsx)(e.p,{children:'Biblioteca que nos mostra os "va".'}),"\n",(0,i.jsxs)(e.p,{children:["O prefixo va em fun\xe7\xf5es como ",(0,i.jsx)(e.code,{children:"va_list, va_start, va_arg e va_end"}),' vem de "variable arguments" (argumentos vari\xe1veis). Essas fun\xe7\xf5es e tipos est\xe3o relacionadas ao manejo de uma quantidade vari\xe1vel de argumentos em uma fun\xe7\xe3o, ou seja, quando a fun\xe7\xe3o pode receber um n\xfamero indefinido de par\xe2metros ap\xf3s os definidos.']}),"\n",(0,i.jsx)(e.p,{children:"Aqui est\xe1 o significado das siglas:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'    va_list: "Variable Argument List" (lista de argumentos vari\xe1veis).\n    va_start: "Variable Argument Start" (in\xedcio da lista de argumentos vari\xe1veis).\n    va_arg: "Variable Argument" (acesso ao pr\xf3ximo argumento vari\xe1vel).\n    va_end: "Variable Argument End" (fim da manipula\xe7\xe3o da lista de argumentos vari\xe1veis).\n    va_copy: "Variable Argument Copy" (c\xf3pia da lista de argumentos vari\xe1veis).\n'})}),"\n",(0,i.jsx)(e.p,{children:'OK, mas o que seria "receber um n\xfamero indefinido de par\xe2metros ap\xf3s os definidos"?'}),"\n",(0,i.jsx)(e.p,{children:"Analise este codigo:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-C",children:'#include <stdarg.h>  // Biblioteca necess\xe1ria para manipular argumentos vari\xe1veis\n#include <stdio.h>\n\n// Fun\xe7\xe3o que soma uma quantidade vari\xe1vel de inteiros\nint soma_int(int n, ...) {\n    va_list lista;  // Declara uma vari\xe1vel para armazenar a lista de argumentos\n    int i;          // Contador\n    int s;          // Vari\xe1vel para armazenar a soma\n\n    va_start(lista, n);  // Inicializa a lista de argumentos a partir do \xfaltimo argumento fixo (n)\n\n    i = 1;  // Inicializa o contador\n    s = 0;  // Inicializa a soma\n\n    // Loop que percorre cada argumento vari\xe1vel\n    while (i <= n) {\n        s = s + va_arg(lista, int);  // Obt\xe9m o pr\xf3ximo argumento e o soma\n        i++;  // Incrementa o contador\n    }\n\n    va_end(lista);  // Finaliza o uso da lista de argumentos\n    return s;  // Retorna a soma dos argumentos\n}\n\nint main() {\n    int soma;\n\n    // Chama a fun\xe7\xe3o com 3 argumentos vari\xe1veis: 2, 3, 4\n    soma = soma_int(3, 2, 3, 4);\n    printf("Soma com 3 parametros: %d\\n", soma);  // Imprime o resultado da soma\n}\n\n'})}),"\n",(0,i.jsx)(e.p,{children:"agora vamos em partes :"}),"\n",(0,i.jsx)(e.h2,{id:"o-que-\xe9-va_list",children:"O que \xe9 va_list?"}),"\n",(0,i.jsxs)(e.p,{children:["va_list \xe9 um tipo de dado que serve para gerenciar a lista de argumentos vari\xe1veis. Quando voc\xea usa ",(0,i.jsx)(e.code,{children:"..."})," nos par\xe2metros da fun\xe7\xe3o,\nest\xe1 dizendo que a fun\xe7\xe3o pode receber um n\xfamero indefinido de argumentos.\nComo voc\xea n\xe3o sabe a quantidade e o tipo exato desses argumentos na defini\xe7\xe3o da fun\xe7\xe3o, voc\xea precisa de um jeito de acessar cada um deles.\n\xc9 a\xed que entra va_list e algumas fun\xe7\xf5es espec\xedficas que ajudam a lidar com esses argumentos."]}),"\n",(0,i.jsx)(e.h3,{id:"vamos-aos-detalhes",children:"Vamos aos detalhes:"}),"\n",(0,i.jsx)(e.h3,{id:"va_start",children:"va_start"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-C",children:"va_start(lista, n); // va_start(variavel que vai guardar a lista, a partir de onde come\xe7a)\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Esta fun\xe7\xe3o inicializa a lista de argumentos vari\xe1veis.\nO primeiro argumento \xe9 o nome da vari\xe1vel que vai guardar a lista (lista), e o segundo argumento (n) \xe9 o \xfaltimo par\xe2metro definido na fun\xe7\xe3o.\nIsso \xe9 necess\xe1rio porque a fun\xe7\xe3o precisa saber de onde come\xe7ar a pegar os argumentos vari\xe1veis ",(0,i.jsx)(e.code,{children:"(aqueles que v\xeam depois de n)"}),"."]}),"\n",(0,i.jsx)(e.h3,{id:"va_arg",children:"va_arg"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-C",children:"va_arg(lista, int);\n"})}),"\n",(0,i.jsx)(e.p,{children:"Esta fun\xe7\xe3o \xe9 usada dentro do loop para acessar cada argumento vari\xe1vel.\nA cada chamada de va_arg, ele vai pegando o pr\xf3ximo argumento da lista e o interpretando como sendo do tipo que voc\xea especifica (no caso, int).\nOu seja, voc\xea est\xe1 somando cada n\xfamero inteiro passado para a fun\xe7\xe3o."}),"\n",(0,i.jsx)(e.admonition,{title:"Aten\xe7\xe3o",type:"danger",children:(0,i.jsx)(e.p,{children:"Quando voc\xea chama va_arg(lista, int);, ele pega o pr\xf3ximo argumento da lista e, automaticamente, avan\xe7a para o seguinte. Sem precisar de iteirador ou Loops"})}),"\n",(0,i.jsx)(e.h3,{id:"va_end",children:"va_end"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-C",children:"va_end(lista);\n"})}),"\n",(0,i.jsx)(e.p,{children:"Depois de terminar de usar a lista de argumentos, voc\xea precisa finalizar o processo com va_end.\nIsso \xe9 importante porque, internamente, o sistema pode usar recursos que precisam ser liberados ou reinicializados quando voc\xea termina de usar a lista."})]})}function l(a={}){const{wrapper:e}={...(0,s.R)(),...a.components};return e?(0,i.jsx)(e,{...a,children:(0,i.jsx)(u,{...a})}):u(a)}},8453:(a,e,n)=>{n.d(e,{R:()=>r,x:()=>t});var i=n(6540);const s={},o=i.createContext(s);function r(a){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof a?a(e):{...e,...a}}),[e,a])}function t(a){let e;return e=a.disableParentContext?"function"==typeof a.components?a.components(s):a.components||s:r(a.components),i.createElement(o.Provider,{value:e},a.children)}}}]);